{"ast":null,"code":"import _objectSpread from \"/Users/andreja/Desktop/Projekti/Reminders/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as actionTypes from \"../actions/actionTypes/lists\";\nconst initialState = {\n  lists: [],\n  lastListNumber: 0\n};\n\nconst formatingObject = data => {\n  if (data) {\n    let keys = Object.keys(data);\n    let values = Object.values(data);\n    let listsArray = values.map((item, index) => {\n      return {\n        id: keys[index],\n        value: item\n      };\n    });\n    return listsArray.sort((a, b) => a.value.order - b.value.order);\n  }\n};\n\nconst listReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_LISTS_START:\n      return _objectSpread({}, state, {\n        lists: []\n      });\n\n    case actionTypes.GET_LISTS_SUCCESS:\n      const formatedList = formatingObject(action.payload);\n      const order = formatedList ? formatedList.length : 0;\n      return _objectSpread({}, state, {\n        lists: formatedList,\n        lastListNumber: order\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default listReducer;","map":{"version":3,"sources":["/Users/andreja/Desktop/Projekti/Reminders/src/store/reducers/listReducer.js"],"names":["actionTypes","initialState","lists","lastListNumber","formatingObject","data","keys","Object","values","listsArray","map","item","index","id","value","sort","a","b","order","listReducer","state","action","type","GET_LISTS_START","GET_LISTS_SUCCESS","formatedList","payload","length"],"mappings":";AAAA,OAAO,KAAKA,WAAZ,MAA6B,8BAA7B;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,cAAc,EAAE;AAFG,CAArB;;AAKA,MAAMC,eAAe,GAAGC,IAAI,IAAI;AAC9B,MAAIA,IAAJ,EAAU;AACR,QAAIC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,IAAZ,CAAX;AACA,QAAIG,MAAM,GAAGD,MAAM,CAACC,MAAP,CAAcH,IAAd,CAAb;AACA,QAAII,UAAU,GAAGD,MAAM,CAACE,GAAP,CAAW,CAACC,IAAD,EAAOC,KAAP,KAAiB;AAC3C,aAAO;AACLC,QAAAA,EAAE,EAAEP,IAAI,CAACM,KAAD,CADH;AAELE,QAAAA,KAAK,EAAEH;AAFF,OAAP;AAID,KALgB,CAAjB;AAMA,WAAOF,UAAU,CAACM,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACF,KAAF,CAAQI,KAAR,GAAgBD,CAAC,CAACH,KAAF,CAAQI,KAAlD,CAAP;AACD;AACF,CAZD;;AAcA,MAAMC,WAAW,GAAG,CAACC,KAAK,GAAGnB,YAAT,EAAuBoB,MAAvB,KAAkC;AACpD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKtB,WAAW,CAACuB,eAAjB;AACE,+BACKH,KADL;AAEElB,QAAAA,KAAK,EAAE;AAFT;;AAIF,SAAKF,WAAW,CAACwB,iBAAjB;AACE,YAAMC,YAAY,GAAGrB,eAAe,CAACiB,MAAM,CAACK,OAAR,CAApC;AACA,YAAMR,KAAK,GAAGO,YAAY,GAAGA,YAAY,CAACE,MAAhB,GAAyB,CAAnD;AACA,+BACKP,KADL;AAEElB,QAAAA,KAAK,EAAEuB,YAFT;AAGEtB,QAAAA,cAAc,EAAEe;AAHlB;;AAKF;AACE,aAAOE,KAAP;AAfJ;AAiBD,CAlBD;;AAoBA,eAAeD,WAAf","sourcesContent":["import * as actionTypes from \"../actions/actionTypes/lists\";\n\nconst initialState = {\n  lists: [],\n  lastListNumber: 0,\n};\n\nconst formatingObject = data => {\n  if (data) {\n    let keys = Object.keys(data);\n    let values = Object.values(data);\n    let listsArray = values.map((item, index) => {\n      return {\n        id: keys[index],\n        value: item\n      };\n    });\n    return listsArray.sort((a, b) => a.value.order - b.value.order)\n  }\n};\n\nconst listReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_LISTS_START:\n      return {\n        ...state,\n        lists: []\n      };\n    case actionTypes.GET_LISTS_SUCCESS:\n      const formatedList = formatingObject(action.payload);\n      const order = formatedList ? formatedList.length : 0;\n      return {\n        ...state,\n        lists: formatedList,\n        lastListNumber: order\n      };\n    default:\n      return state;\n  }\n};\n\nexport default listReducer;\n"]},"metadata":{},"sourceType":"module"}