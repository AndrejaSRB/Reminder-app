{"ast":null,"code":"import _slicedToArray from \"/Users/andreja/Desktop/Projekti/Reminders/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/andreja/Desktop/Projekti/Reminders/src/components/Lists/ListModal.js\";\nimport React, { useState, useEffect, lazy, Suspense } from \"react\";\nimport { DialogTitle, DialogContent, Dialog, Button, Slide, TextField, Icon, Typography } from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editList, addList } from \"../../store/actions/actions/lists\";\nimport Loader from \"../UI/Loader\";\nimport { withRouter } from \"react-router\";\nconst useStyles = makeStyles(theme => ({\n  textField: {\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: 200\n    }\n  },\n  modalContainer: {\n    \" & > div > div\": {\n      width: \"100%\",\n      margin: 20\n    }\n  },\n  selectContainer: {\n    width: \"100%\",\n    margin: \"10px 0\"\n  },\n  pickedIcon: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginTop: 10,\n    \"& > span\": {\n      marginLeft: 8\n    }\n  },\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    \"& > button\": {\n      color: \"#344955\"\n    }\n  },\n  form: {\n    \"& > div\": {\n      margin: \"10px 0\"\n    },\n    \"& > div:nth-child(2)\": {\n      \"& > div > button > div > div\": {\n        backgroundColor: \"#344955\"\n      }\n    }\n  },\n  dialogTitle: {\n    backgroundColor: \"#344955\",\n    color: \"#FFFFFF\"\n  }\n}));\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return React.createElement(Slide, Object.assign({\n    direction: \"up\",\n    ref: ref\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }));\n});\n\nconst AddNewList = props => {\n  const classes = useStyles();\n\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        pickedIcon = _useState2[0],\n        setpickedIcon = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        name = _useState4[0],\n        setName = _useState4[1];\n\n  const dispatch = useDispatch();\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isIconPickerOpen = _useState6[0],\n        setIsIconPickerOpen = _useState6[1];\n\n  const _useState7 = useState(\"Create new list\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        title = _useState8[0],\n        setTitle = _useState8[1];\n\n  const handleAddListModal = props.handleAddListModal,\n        open = props.open,\n        list = props.list;\n  const user = useSelector(state => state.root.user);\n  const order = useSelector(state => state.lists.lastListNumber);\n  const IconPicker = lazy(() => import(\"../UI/IconPicker/IconPicker\"));\n  useEffect(() => {\n    setpickedIcon(\"\");\n    return () => resetToDefaultValue();\n  }, [open]);\n  useEffect(() => {\n    if (list) {\n      setName(list.value.name);\n      setpickedIcon(list.value.icon);\n      setTitle(\"Edit list\");\n    }\n\n    return () => resetToDefaultValue();\n  }, [list]);\n\n  const resetToDefaultValue = () => {\n    setName(\"\");\n    setpickedIcon(\"\");\n    setTitle(\"Create new list\");\n  };\n\n  const handlePickIcon = icon => {\n    setpickedIcon(icon);\n  };\n\n  const handleIconPickerModal = isOpen => () => {\n    setIsIconPickerOpen(isOpen);\n  };\n\n  const formatName = name => {\n    if (name) {\n      if (typeof name !== \"string\") return \"\";\n      return name.charAt(0).toUpperCase() + name.slice(1);\n    }\n  };\n\n  const handleName = event => {\n    setName(event.target.value);\n  };\n\n  const IconPickerModal = isIconPickerOpen ? React.createElement(Suspense, {\n    fallback: React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(IconPicker, {\n    open: isIconPickerOpen,\n    handleIconPickerModal: handleIconPickerModal,\n    handlePickIcon: handlePickIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  })) : null;\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    if (!list) {\n      let orderNumber = order;\n      let newList = {\n        name: formatName(name),\n        icon: pickedIcon,\n        order: ++orderNumber,\n        reminders: []\n      };\n\n      if (newList.icon && newList.name) {\n        dispatch(addList({\n          body: newList,\n          userId: user.uid\n        }));\n      }\n    } else {\n      let newList = {\n        name: formatName(name),\n        icon: pickedIcon,\n        order: list.value.order,\n        reminders: list.value.reminders\n      };\n\n      if (newList.icon && newList.name) {\n        dispatch(editList({\n          listId: list.id,\n          body: newList,\n          userId: user.uid\n        }));\n        props.history.push(\"/\");\n      }\n    }\n\n    handleAddListModal(false)();\n  };\n\n  const renderButtonName = list ? \"Edit\" : \"Add\";\n  const renderPickedIcon = pickedIcon ? React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"h5\",\n    component: \"p\",\n    className: classes.pickedIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, \"You picked: \", React.createElement(Icon, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180\n    },\n    __self: this\n  }, pickedIcon)) : null;\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, React.createElement(Dialog, {\n    open: open,\n    TransitionComponent: Transition,\n    keepMounted: true,\n    onClose: handleAddListModal(false),\n    className: classes.modalContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    className: classes.dialogTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    gutterBottom: true,\n    variant: \"h5\",\n    component: \"p\",\n    className: classes.pickedIcon,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194\n    },\n    __self: this\n  }, title)), React.createElement(DialogContent, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    className: classes.form,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204\n    },\n    __self: this\n  }, React.createElement(TextField, {\n    type: \"text\",\n    placeholder: \"Name\",\n    label: \"Name\",\n    variant: \"outlined\",\n    fullWidth: true,\n    onChange: handleName,\n    value: name,\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }), React.createElement(Button, {\n    onClick: handleIconPickerModal(true),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  }, \"Pick Icon\"), renderPickedIcon, React.createElement(\"div\", {\n    className: classes.buttons,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218\n    },\n    __self: this\n  }, renderButtonName), React.createElement(Button, {\n    onClick: handleAddListModal(false),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219\n    },\n    __self: this\n  }, \"Cancel\")))), IconPickerModal));\n};\n\nexport default withRouter(AddNewList);","map":{"version":3,"sources":["/Users/andreja/Desktop/Projekti/Reminders/src/components/Lists/ListModal.js"],"names":["React","useState","useEffect","lazy","Suspense","DialogTitle","DialogContent","Dialog","Button","Slide","TextField","Icon","Typography","makeStyles","useDispatch","useSelector","editList","addList","Loader","withRouter","useStyles","theme","textField","marginLeft","spacing","marginRight","width","modalContainer","margin","selectContainer","pickedIcon","display","alignItems","marginTop","buttons","justifyContent","color","form","backgroundColor","dialogTitle","Transition","forwardRef","props","ref","AddNewList","classes","setpickedIcon","name","setName","dispatch","isIconPickerOpen","setIsIconPickerOpen","title","setTitle","handleAddListModal","open","list","user","state","root","order","lists","lastListNumber","IconPicker","resetToDefaultValue","value","icon","handlePickIcon","handleIconPickerModal","isOpen","formatName","charAt","toUpperCase","slice","handleName","event","target","IconPickerModal","onSubmit","e","preventDefault","orderNumber","newList","reminders","body","userId","uid","listId","id","history","push","renderButtonName","renderPickedIcon"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, lazy, Suspense } from \"react\";\nimport {\n  DialogTitle,\n  DialogContent,\n  Dialog,\n  Button,\n  Slide,\n  TextField,\n  Icon,\n  Typography\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editList, addList } from \"../../store/actions/actions/lists\";\nimport Loader from \"../UI/Loader\";\nimport { withRouter } from \"react-router\";\n\nconst useStyles = makeStyles(theme => ({\n  textField: {\n    textField: {\n      marginLeft: theme.spacing(1),\n      marginRight: theme.spacing(1),\n      width: 200\n    }\n  },\n  modalContainer: {\n    \" & > div > div\": {\n      width: \"100%\",\n      margin: 20\n    }\n  },\n  selectContainer: {\n    width: \"100%\",\n    margin: \"10px 0\"\n  },\n  pickedIcon: {\n    display: \"flex\",\n    alignItems: \"center\",\n    marginTop: 10,\n    \"& > span\": {\n      marginLeft: 8\n    }\n  },\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    \"& > button\": {\n      color: \"#344955\"\n    }\n  },\n  form: {\n    \"& > div\": {\n      margin: \"10px 0\"\n    },\n    \"& > div:nth-child(2)\": {\n      \"& > div > button > div > div\": {\n        backgroundColor: \"#344955\"\n      }\n    }\n  },\n  dialogTitle: {\n    backgroundColor: \"#344955\",\n    color: \"#FFFFFF\"\n  }\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst AddNewList = props => {\n  const classes = useStyles();\n  const [pickedIcon, setpickedIcon] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const dispatch = useDispatch();\n  const [isIconPickerOpen, setIsIconPickerOpen] = useState(false);\n  const [title, setTitle] = useState(\"Create new list\");\n  const { handleAddListModal, open, list } = props;\n  const user = useSelector(state => state.root.user);\n  const order = useSelector(state => state.lists.lastListNumber);\n  const IconPicker = lazy(() => import(\"../UI/IconPicker/IconPicker\"));\n  useEffect(() => {\n    setpickedIcon(\"\");\n    return () => resetToDefaultValue();\n  }, [open]);\n\n  useEffect(() => {\n    if (list) {\n      setName(list.value.name);\n      setpickedIcon(list.value.icon);\n      setTitle(\"Edit list\");\n    }\n    return () => resetToDefaultValue();\n  }, [list]);\n\n  const resetToDefaultValue = () => {\n    setName(\"\");\n    setpickedIcon(\"\");\n    setTitle(\"Create new list\");\n  };\n\n  const handlePickIcon = icon => {\n    setpickedIcon(icon);\n  };\n\n  const handleIconPickerModal = isOpen => () => {\n    setIsIconPickerOpen(isOpen);\n  };\n\n  const formatName = name => {\n    if (name) {\n      if (typeof name !== \"string\") return \"\";\n      return name.charAt(0).toUpperCase() + name.slice(1);\n    }\n  };\n  \n  const handleName = event => {\n    setName(event.target.value);\n  };\n\n  const IconPickerModal = isIconPickerOpen ? (\n    <Suspense fallback={<Loader />}>\n      <IconPicker\n        open={isIconPickerOpen}\n        handleIconPickerModal={handleIconPickerModal}\n        handlePickIcon={handlePickIcon}\n      />\n    </Suspense>\n  ) : null;\n\n  const onSubmit = e => {\n    e.preventDefault();\n    if (!list) {\n      let orderNumber = order;\n      let newList = {\n        name: formatName(name),\n        icon: pickedIcon,\n        order: ++orderNumber,\n        reminders: []\n      };\n      if (newList.icon && newList.name) {\n        dispatch(\n          addList({\n            body: newList,\n            userId: user.uid\n          })\n        );\n      }\n    } else {\n      let newList = {\n        name: formatName(name),\n        icon: pickedIcon,\n        order: list.value.order,\n        reminders: list.value.reminders\n      };\n      if (newList.icon && newList.name) {\n        dispatch(\n          editList({\n            listId: list.id,\n            body: newList,\n            userId: user.uid\n          })\n        );\n        props.history.push(\"/\");\n      }\n    }\n    handleAddListModal(false)();\n  };\n\n  const renderButtonName = list ? \"Edit\" : \"Add\";\n\n  const renderPickedIcon = pickedIcon ? (\n    <Typography\n      gutterBottom\n      variant=\"h5\"\n      component=\"p\"\n      className={classes.pickedIcon}\n    >\n      You picked: <Icon>{pickedIcon}</Icon>\n    </Typography>\n  ) : null;\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleAddListModal(false)}\n        className={classes.modalContainer}\n      >\n        <DialogTitle className={classes.dialogTitle}>\n          <Typography\n            gutterBottom\n            variant=\"h5\"\n            component=\"p\"\n            className={classes.pickedIcon}\n          >\n            {title}\n          </Typography>\n        </DialogTitle>\n        <DialogContent>\n          <form onSubmit={onSubmit} className={classes.form}>\n            <TextField\n              type=\"text\"\n              placeholder=\"Name\"\n              label=\"Name\"\n              variant=\"outlined\"\n              fullWidth\n              onChange={handleName}\n              value={name}\n              required\n            />\n            <Button onClick={handleIconPickerModal(true)}>Pick Icon</Button>\n            {renderPickedIcon}\n            <div className={classes.buttons}>\n              <Button type=\"submit\">{renderButtonName}</Button>\n              <Button onClick={handleAddListModal(false)}>Cancel</Button>\n            </div>\n          </form>\n        </DialogContent>\n        {IconPickerModal}\n      </Dialog>\n    </div>\n  );\n};\n\nexport default withRouter(AddNewList);\n"]},"metadata":{},"sourceType":"module"}