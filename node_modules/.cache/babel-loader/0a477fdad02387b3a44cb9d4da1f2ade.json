{"ast":null,"code":"import _slicedToArray from \"/Users/andreja/Desktop/Projekti/Reminders/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/andreja/Desktop/Projekti/Reminders/src/components/Reminders/AddReminder/AddReminder.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Slide from \"@material-ui/core/Slide\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MuiDatePicker from \"../MuiDatePicker/MuiDatePicker\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { postReminder } from \"../../../store/actions/actions/reminders\";\nimport { Form, Field } from \"react-final-form\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Select } from \"final-form-material-ui\";\nimport { validateTitle, validateImportance, validateDate, validateDescription } from \"../../Authentication/validation\";\nimport CustomField from \"../../UI/CustomField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nconst useStyles = makeStyles(theme => ({\n  modalContainer: {\n    \" & > div > div\": {\n      width: \"100%\",\n      margin: 20\n    }\n  },\n  selectContainer: {\n    width: \"100%\",\n    margin: \"10px 0\"\n  },\n  form: {\n    padding: 20\n  },\n  dialogTitle: {\n    backgroundColor: \"#344955\",\n    color: \"#FFFFFF\"\n  }\n}));\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return React.createElement(Slide, Object.assign({\n    direction: \"up\",\n    ref: ref\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }));\n});\n\nconst AddToDo = props => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const _useState = useState(new Date()),\n        _useState2 = _slicedToArray(_useState, 1),\n        startDate = _useState2[0];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        currentDate = _useState4[0],\n        setCurrentDate = _useState4[1];\n\n  const user = useSelector(state => state.root.user);\n  const handleModalAdd = props.handleModalAdd,\n        open = props.open;\n  useEffect(() => {\n    const convertDate = () => {\n      let date = startDate.getDate();\n      let month = startDate.getMonth();\n      let year = startDate.getFullYear();\n\n      if (month < 10) {\n        month = \"0\".concat(month + 1);\n      } else {\n        month += 1;\n      }\n\n      if (date < 10) {\n        date = \"0\".concat(date);\n      }\n\n      setCurrentDate(\"\".concat(year, \"-\").concat(month, \"-\").concat(date));\n    };\n\n    convertDate();\n  }, [startDate]);\n\n  const onSubmit = async values => {\n    let reminder;\n\n    if (values.date) {\n      reminder = {\n        title: values.title,\n        date: values.date,\n        body: values.description,\n        importance: values.importance\n      };\n    } else {\n      reminder = {\n        title: values.title,\n        date: currentDate,\n        body: values.description,\n        importance: values.importance\n      };\n    }\n\n    dispatch(postReminder({\n      body: reminder,\n      userId: user.uid\n    }));\n    handleModalAdd(false);\n  };\n\n  const handleCloseModal = () => {\n    handleModalAdd(false);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(Dialog, {\n    open: open,\n    TransitionComponent: Transition,\n    keepMounted: true,\n    onClose: handleCloseModal,\n    className: classes.modalContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    className: classes.dialogTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }, \"Create new reminder\"), React.createElement(Form, {\n    onSubmit: onSubmit,\n    render: ({\n      handleSubmit\n    }) => React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      className: classes.form,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(CustomField, {\n      validation: validateTitle,\n      type: \"text\",\n      placeholder: \"Title\",\n      label: \"Title\",\n      fullWidth: true,\n      name: \"title\",\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(Field, {\n      fullWidth: true,\n      name: \"importance\",\n      component: Select,\n      label: \"Select importance\",\n      required: true,\n      formControlProps: {\n        fullWidth: true\n      },\n      validate: validateImportance,\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      value: \"high\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, \"High\"), React.createElement(MenuItem, {\n      value: \"medium\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, \"Medium\"), React.createElement(MenuItem, {\n      value: \"low\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, \"Low\"))), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"date\",\n      validate: validateDate,\n      component: MuiDatePicker,\n      variant: \"outlined\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(CustomField, {\n      validation: validateDescription,\n      type: \"text\",\n      placeholder: \"Short description\",\n      label: \"Short description\",\n      fullWidth: true,\n      name: \"description\",\n      variant: \"outlined\",\n      multiline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"submit\",\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, \"Add\"), React.createElement(Button, {\n      className: classes.button,\n      onClick: handleCloseModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, \"Cancel\")))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  })));\n};\n\nexport default AddToDo;","map":{"version":3,"sources":["/Users/andreja/Desktop/Projekti/Reminders/src/components/Reminders/AddReminder/AddReminder.js"],"names":["React","useState","useEffect","Button","Dialog","Slide","makeStyles","MuiDatePicker","useDispatch","useSelector","postReminder","Form","Field","MenuItem","Select","validateTitle","validateImportance","validateDate","validateDescription","CustomField","Grid","DialogTitle","DialogActions","useStyles","theme","modalContainer","width","margin","selectContainer","form","padding","dialogTitle","backgroundColor","color","Transition","forwardRef","props","ref","AddToDo","classes","dispatch","Date","startDate","currentDate","setCurrentDate","user","state","root","handleModalAdd","open","convertDate","date","getDate","month","getMonth","year","getFullYear","onSubmit","values","reminder","title","body","description","importance","userId","uid","handleCloseModal","handleSubmit","fullWidth","button"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Slide from \"@material-ui/core/Slide\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MuiDatePicker from \"../MuiDatePicker/MuiDatePicker\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { postReminder } from \"../../../store/actions/actions/reminders\";\nimport { Form, Field } from \"react-final-form\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Select } from \"final-form-material-ui\";\nimport {\n  validateTitle,\n  validateImportance,\n  validateDate,\n  validateDescription\n} from \"../../Authentication/validation\";\nimport CustomField from \"../../UI/CustomField\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\n\nconst useStyles = makeStyles(theme => ({\n  modalContainer: {\n    \" & > div > div\": {\n      width: \"100%\",\n      margin: 20\n    }\n  },\n  selectContainer: {\n    width: \"100%\",\n    margin: \"10px 0\"\n  },\n  form: {\n    padding: 20\n  },\n  dialogTitle: {\n    backgroundColor: \"#344955\",\n    color: \"#FFFFFF\"\n  }\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst AddToDo = props => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [startDate] = useState(new Date());\n  const [currentDate, setCurrentDate] = useState(\"\");\n  const user = useSelector(state => state.root.user);\n  const { handleModalAdd, open } = props;\n  useEffect(() => {\n    const convertDate = () => {\n      let date = startDate.getDate();\n      let month = startDate.getMonth();\n      let year = startDate.getFullYear();\n      if (month < 10) {\n        month = `0${month + 1}`;\n      } else {\n        month += 1;\n      }\n      if (date < 10) {\n        date = `0${date}`;\n      }\n      setCurrentDate(`${year}-${month}-${date}`);\n    };\n    convertDate();\n  }, [startDate]);\n\n  const onSubmit = async values => {\n    let reminder;\n    if (values.date) {\n      reminder = {\n        title: values.title,\n        date: values.date,\n        body: values.description,\n        importance: values.importance\n      };\n    } else {\n      reminder = {\n        title: values.title,\n        date: currentDate,\n        body: values.description,\n        importance: values.importance\n      };\n    }\n    dispatch(\n      postReminder({\n        body: reminder,\n        userId: user.uid\n      })\n    );\n\n    handleModalAdd(false);\n  };\n  const handleCloseModal = () => {\n    handleModalAdd(false);\n  };\n  return (\n    <div>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleCloseModal}\n        className={classes.modalContainer}\n      >\n        <DialogTitle className={classes.dialogTitle}>\n          Create new reminder\n        </DialogTitle>\n        <Form\n          onSubmit={onSubmit}\n          render={({ handleSubmit }) => (\n            <form onSubmit={handleSubmit} className={classes.form}>\n              <Grid container spacing={3} alignItems=\"center\">\n                <Grid item xs={12}>\n                  <CustomField\n                    validation={validateTitle}\n                    type=\"text\"\n                    placeholder=\"Title\"\n                    label=\"Title\"\n                    fullWidth={true}\n                    name=\"title\"\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Field\n                    fullWidth\n                    name=\"importance\"\n                    component={Select}\n                    label=\"Select importance\"\n                    required\n                    formControlProps={{ fullWidth: true }}\n                    validate={validateImportance}\n                    variant=\"outlined\"\n                  >\n                    <MenuItem value=\"high\">High</MenuItem>\n                    <MenuItem value=\"medium\">Medium</MenuItem>\n                    <MenuItem value=\"low\">Low</MenuItem>\n                  </Field>\n                </Grid>\n                <Grid item xs={12} sm={6}>\n                  <Field\n                    name=\"date\"\n                    validate={validateDate}\n                    component={MuiDatePicker}\n                    variant=\"outlined\"\n                  />\n                </Grid>\n                <Grid item xs={12}>\n                  <CustomField\n                    validation={validateDescription}\n                    type=\"text\"\n                    placeholder=\"Short description\"\n                    label=\"Short description\"\n                    fullWidth={true}\n                    name=\"description\"\n                    variant=\"outlined\"\n                    multiline={true}\n                  />\n                </Grid>\n\n                <DialogActions>\n                  <Button type=\"submit\" className={classes.button}>\n                    Add\n                  </Button>\n                  <Button className={classes.button} onClick={handleCloseModal}>\n                    Cancel\n                  </Button>\n                </DialogActions>\n              </Grid>\n            </form>\n          )}\n        />\n      </Dialog>\n    </div>\n  );\n};\n\nexport default AddToDo;\n"]},"metadata":{},"sourceType":"module"}