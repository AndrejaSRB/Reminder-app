{"ast":null,"code":"import _slicedToArray from \"/Users/andreja/Desktop/Projekti/Reminders/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/andreja/Desktop/Projekti/Reminders/src/components/Reminders/EditReminder/EditReminder.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Slide from \"@material-ui/core/Slide\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MuiDatePicker from \"../MuiDatePicker/MuiDatePicker\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editReminder } from \"../../../store/actions/actions/reminders\";\nimport { Form, Field } from \"react-final-form\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Select } from \"final-form-material-ui\";\nimport { validateTitle, validateImportance, validateDate, validateDescription } from \"../../Authentication/validation\";\nimport CustomField from \"../../UI/CustomField\";\nimport Grid from '@material-ui/core/Grid';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nconst useStyles = makeStyles(theme => ({\n  modalContainer: {\n    \" & > div > div\": {\n      width: \"100%\",\n      margin: 20\n    }\n  },\n  form: {\n    padding: 20\n  },\n  buttonsHolder: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    \"& > button\": {\n      margin: \"0 10px\"\n    }\n  },\n  dialogTitle: {\n    backgroundColor: \"#344955\",\n    color: \"#FFFFFF\"\n  }\n}));\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return React.createElement(Slide, Object.assign({\n    direction: \"up\",\n    ref: ref\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }));\n});\n\nconst EditReminder = props => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        title = _useState2[0],\n        setTitle = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        description = _useState4[0],\n        setDescription = _useState4[1];\n\n  const _useState5 = useState(new Date()),\n        _useState6 = _slicedToArray(_useState5, 1),\n        startDate = _useState6[0];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        currentDate = _useState8[0],\n        setCurrentDate = _useState8[1];\n\n  const _useState9 = useState(\"high\"),\n        _useState10 = _slicedToArray(_useState9, 2),\n        importance = _useState10[0],\n        setImportance = _useState10[1];\n\n  const user = useSelector(state => state.root.user);\n  useEffect(() => {\n    const convertDate = () => {\n      let date = startDate.getDate();\n      let month = startDate.getMonth();\n      let year = startDate.getFullYear();\n\n      if (month < 10) {\n        month = \"0\".concat(month + 1);\n      } else {\n        month += 1;\n      }\n\n      if (date < 10) {\n        date = \"0\".concat(date);\n      }\n\n      setCurrentDate(\"\".concat(year, \"-\").concat(month, \"-\").concat(date));\n    };\n\n    const setDefaultValues = () => {\n      setDescription(props.reminder.body);\n      setTitle(props.reminder.title);\n      setCurrentDate(props.reminder.date);\n      setImportance(props.reminder.importance);\n    };\n\n    convertDate();\n    setDefaultValues();\n  }, [startDate, props.reminder.body, props.reminder.title, props.reminder.date, props.reminder.importance]);\n\n  const handleClose = () => {\n    props.handleEditModalOpen(false)();\n  };\n\n  const onSubmit = async values => {\n    let reminder = {\n      title: values.title,\n      date: values.date,\n      body: values.description,\n      importance: values.importance\n    };\n    dispatch(editReminder({\n      body: reminder,\n      id: props.id,\n      userId: user.uid\n    }));\n    setCurrentDate(currentDate);\n    handleClose();\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(Dialog, {\n    open: props.open,\n    TransitionComponent: Transition,\n    keepMounted: true,\n    onClose: handleClose,\n    className: classes.modalContainer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(DialogTitle, {\n    className: classes.dialogTitle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, \"Edit reminder\"), React.createElement(Form, {\n    onSubmit: onSubmit,\n    render: ({\n      handleSubmit\n    }) => React.createElement(\"form\", {\n      onSubmit: handleSubmit,\n      className: classes.form,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      spacing: 3,\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(CustomField, {\n      validation: validateTitle,\n      type: \"text\",\n      placeholder: \"Title\",\n      label: \"Title\",\n      fullWidth: true,\n      name: \"title\",\n      variant: \"outlined\",\n      initialvalue: title,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(Field, {\n      fullWidth: true,\n      name: \"importance\",\n      component: Select,\n      label: \"Select importance\",\n      required: true,\n      formControlProps: {\n        fullWidth: true\n      },\n      validate: validateImportance,\n      variant: \"outlined\",\n      initialValue: importance,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(MenuItem, {\n      value: \"high\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, \"High\"), React.createElement(MenuItem, {\n      value: \"medium\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Medium\"), React.createElement(MenuItem, {\n      value: \"low\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, \"Low\"))), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      sm: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(Field, {\n      name: \"date\",\n      validate: validateDate,\n      component: MuiDatePicker,\n      variant: \"outlined\",\n      initialValue: currentDate,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      item: true,\n      xs: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }, React.createElement(CustomField, {\n      validation: validateDescription,\n      type: \"text\",\n      placeholder: \"Short description\",\n      label: \"Short description\",\n      fullWidth: true,\n      name: \"description\",\n      variant: \"outlined\",\n      initialvalue: description,\n      multiline: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    })), React.createElement(DialogActions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, React.createElement(Button, {\n      type: \"submit\",\n      className: classes.button,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, \"Edit\"), React.createElement(Button, {\n      className: classes.button,\n      onClick: handleClose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, \"Cancel\")))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  })));\n};\n\nexport default EditReminder;","map":{"version":3,"sources":["/Users/andreja/Desktop/Projekti/Reminders/src/components/Reminders/EditReminder/EditReminder.js"],"names":["React","useState","useEffect","Button","Dialog","DialogActions","Slide","makeStyles","MuiDatePicker","useDispatch","useSelector","editReminder","Form","Field","MenuItem","Select","validateTitle","validateImportance","validateDate","validateDescription","CustomField","Grid","DialogTitle","useStyles","theme","modalContainer","width","margin","form","padding","buttonsHolder","display","justifyContent","alignItems","dialogTitle","backgroundColor","color","Transition","forwardRef","props","ref","EditReminder","classes","dispatch","title","setTitle","description","setDescription","Date","startDate","currentDate","setCurrentDate","importance","setImportance","user","state","root","convertDate","date","getDate","month","getMonth","year","getFullYear","setDefaultValues","reminder","body","handleClose","handleEditModalOpen","onSubmit","values","id","userId","uid","open","handleSubmit","fullWidth","button"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport Slide from \"@material-ui/core/Slide\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport MuiDatePicker from \"../MuiDatePicker/MuiDatePicker\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { editReminder } from \"../../../store/actions/actions/reminders\";\nimport { Form, Field } from \"react-final-form\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport { Select } from \"final-form-material-ui\";\nimport {\n  validateTitle,\n  validateImportance,\n  validateDate,\n  validateDescription\n} from \"../../Authentication/validation\";\nimport CustomField from \"../../UI/CustomField\";\nimport Grid from '@material-ui/core/Grid';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nconst useStyles = makeStyles(theme => ({\n  modalContainer: {\n    \" & > div > div\": {\n      width: \"100%\",\n      margin: 20\n    }\n  },\n  form: {\n    padding: 20\n  },\n  buttonsHolder: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n    alignItems: \"center\",\n    \"& > button\": {\n      margin: \"0 10px\"\n    }\n  },\n  dialogTitle: {\n    backgroundColor: \"#344955\",\n    color: \"#FFFFFF\"\n  }\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nconst EditReminder = props => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [startDate] = useState(new Date());\n  const [currentDate, setCurrentDate] = useState(\"\");\n  const [importance, setImportance] = useState(\"high\");\n  const user = useSelector(state => state.root.user);\n\n  useEffect(() => {\n    const convertDate = () => {\n      let date = startDate.getDate();\n      let month = startDate.getMonth();\n      let year = startDate.getFullYear();\n      if (month < 10) {\n        month = `0${month + 1}`;\n      } else {\n        month += 1;\n      }\n      if (date < 10) {\n        date = `0${date}`;\n      }\n      setCurrentDate(`${year}-${month}-${date}`);\n    };\n    const setDefaultValues = () => {\n      setDescription(props.reminder.body);\n      setTitle(props.reminder.title);\n      setCurrentDate(props.reminder.date);\n      setImportance(props.reminder.importance);\n    };\n    convertDate();\n    setDefaultValues();\n  }, [\n    startDate,\n    props.reminder.body,\n    props.reminder.title,\n    props.reminder.date,\n    props.reminder.importance\n  ]);\n\n\n  const handleClose = () => {\n    props.handleEditModalOpen(false)();\n  };\n\n  const onSubmit = async values => {\n    let reminder = {\n      title: values.title,\n      date: values.date,\n      body: values.description,\n      importance: values.importance\n    };\n    dispatch(editReminder({\n      body: reminder,\n      id: props.id,\n      userId: user.uid\n    }));\n    setCurrentDate(currentDate);\n    handleClose();\n  };\n  \n  return (\n    <div>\n      <Dialog\n        open={props.open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        className={classes.modalContainer}\n      >\n        <DialogTitle className={classes.dialogTitle}>Edit reminder</DialogTitle>\n        <Form\n          onSubmit={onSubmit}\n          render={({ handleSubmit }) => (\n            <form onSubmit={handleSubmit} className={classes.form}>\n              <Grid container spacing={3} alignItems=\"center\">\n               <Grid item xs={12}>\n              <CustomField\n                validation={validateTitle}\n                type=\"text\"\n                placeholder=\"Title\"\n                label=\"Title\"\n                fullWidth={true}\n                name=\"title\"\n                variant=\"outlined\"\n                initialvalue={title}\n\n              />\n              </Grid>\n              <Grid item xs={12} sm={6}>\n              <Field\n                fullWidth\n                name=\"importance\"\n                component={Select}\n                label=\"Select importance\"\n                required\n                formControlProps={{ fullWidth: true }}\n                validate={validateImportance}\n                variant=\"outlined\"\n                initialValue={importance}\n              >\n                <MenuItem value=\"high\">High</MenuItem>\n                <MenuItem value=\"medium\">Medium</MenuItem>\n                <MenuItem value=\"low\">Low</MenuItem>\n              </Field>\n              </Grid>\n              <Grid item xs={12} sm={6}>\n              <Field\n                name=\"date\"\n                validate={validateDate}\n                component={MuiDatePicker}\n                variant=\"outlined\"\n                initialValue={currentDate}\n              />\n              </Grid>\n              <Grid item xs={12}>\n              <CustomField\n                validation={validateDescription}\n                type=\"text\"\n                placeholder=\"Short description\"\n                label=\"Short description\"\n                fullWidth={true}\n                name=\"description\"\n                variant=\"outlined\"\n                initialvalue={description}\n                multiline={true}\n              />\n              </Grid>\n              \n              <DialogActions>\n                <Button type=\"submit\" className={classes.button}>\n                  Edit\n                </Button>\n                <Button className={classes.button} onClick={handleClose}>\n                  Cancel\n                </Button>\n              </DialogActions>\n              </Grid>\n            </form>\n          )}\n        />\n      </Dialog>\n    </div>\n  );\n};\n\nexport default EditReminder;\n"]},"metadata":{},"sourceType":"module"}