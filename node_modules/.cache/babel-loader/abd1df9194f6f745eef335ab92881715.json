{"ast":null,"code":"import _objectSpread from \"/Users/andreja/Desktop/Projekti/Reminders/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport * as actionTypes from \"../actions/actionTypes/reminders\";\nimport { isTomorrow, isToday, isFuture, isPast } from \"date-fns\";\nconst initialState = {\n  reminders: [],\n  splashScreen: false,\n  today: [],\n  tomorrow: [],\n  upcoming: [],\n  highImportance: [],\n  mediumImportance: [],\n  lowImportance: [],\n  isFiltered: false,\n  isFilterRouteHidden: false\n};\n\nconst formatingObject = data => {\n  if (data) {\n    let keys = Object.keys(data);\n    let values = Object.values(data);\n    return values.map((item, index) => {\n      return {\n        id: keys[index],\n        value: item\n      };\n    });\n  }\n};\n\nconst compareDate = element => isToday(new Date(element.value.date)) ? {\n  date: 0,\n  element: element\n} : isTomorrow(new Date(element.value.date)) ? {\n  date: 1,\n  element: element\n} : isFuture(new Date(element.value.date)) ? {\n  date: 2,\n  element: element\n} : isPast(new Date(element.value.date)) ? {\n  date: 0,\n  element: element\n} : null;\n\nconst formatingDates = list => {\n  let upcoming = [];\n  let tomorrow = [];\n  let today = [];\n\n  if (list.length) {\n    list.forEach(element => {\n      let date = compareDate(element);\n      return date.date === 0 ? today.push(date.element) : date.date === 1 ? tomorrow.push(date.element) : date.date === 2 ? upcoming.push(date.element) : null;\n    });\n  }\n\n  return {\n    today: today,\n    upcoming: upcoming,\n    tomorrow: tomorrow\n  };\n};\n\nconst sortByImportance = list => {\n  let high = [];\n  let medium = [];\n  let low = [];\n\n  if (list.length) {\n    list.forEach(element => element.value.importance === \"high\" ? high.push(element) : element.value.importance === \"medium\" ? medium.push(element) : element.value.importance === \"low\" ? low.push(element) : null);\n  }\n\n  return {\n    high: high,\n    medium: medium,\n    low: low\n  };\n};\n\nconst remindersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_REMINDERS_LIST_SUCCESS:\n      if (action.payload === null) {\n        return _objectSpread({}, state, {\n          splashScreen: false\n        });\n      } else {\n        let data = formatingObject(action.payload);\n        let dates = formatingDates(data);\n        let importance = sortByImportance(data);\n        return _objectSpread({}, state, {\n          reminders: data,\n          today: dates.today,\n          upcoming: dates.upcoming,\n          tomorrow: dates.tomorrow,\n          splashScreen: false,\n          highImportance: importance.high,\n          mediumImportance: importance.medium,\n          lowImportance: importance.low,\n          isFiltered: false\n        });\n      }\n\n    case actionTypes.USER_LOGGED_IN:\n      return _objectSpread({}, state, {\n        splashScreen: true\n      });\n\n    case actionTypes.USER_LOGGED_OUT:\n      return _objectSpread({}, state, {\n        reminders: [],\n        splashScreen: false,\n        today: [],\n        tomorrow: [],\n        upcoming: [],\n        highImportance: [],\n        mediumImportance: [],\n        lowImportance: [],\n        criterium: null,\n        isFiltered: false\n      });\n\n    case actionTypes.RENDER_FILTER_ROUTE:\n      return _objectSpread({}, state, {\n        isFilterRouteHidden: false\n      });\n\n    case actionTypes.DELETE_FILTER_ROUTE:\n      return _objectSpread({}, state, {\n        isFilterRouteHidden: true\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default remindersReducer;","map":{"version":3,"sources":["/Users/andreja/Desktop/Projekti/Reminders/src/store/reducers/remindersReducer.js"],"names":["actionTypes","isTomorrow","isToday","isFuture","isPast","initialState","reminders","splashScreen","today","tomorrow","upcoming","highImportance","mediumImportance","lowImportance","isFiltered","isFilterRouteHidden","formatingObject","data","keys","Object","values","map","item","index","id","value","compareDate","element","Date","date","formatingDates","list","length","forEach","push","sortByImportance","high","medium","low","importance","remindersReducer","state","action","type","GET_REMINDERS_LIST_SUCCESS","payload","dates","USER_LOGGED_IN","USER_LOGGED_OUT","criterium","RENDER_FILTER_ROUTE","DELETE_FILTER_ROUTE"],"mappings":"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","sourcesContent":["import * as actionTypes from \"../actions/actionTypes/reminders\";\nimport { isTomorrow, isToday, isFuture, isPast } from \"date-fns\";\n\nconst initialState = {\n  reminders: [],\n  splashScreen: false,\n  today: [],\n  tomorrow: [],\n  upcoming: [],\n  highImportance: [],\n  mediumImportance: [],\n  lowImportance: [],\n  isFiltered: false,\n  isFilterRouteHidden: false\n};\n\nconst formatingObject = data => {\n  if (data) {\n    let keys = Object.keys(data);\n    let values = Object.values(data);\n    return values.map((item, index) => {\n      return {\n        id: keys[index],\n        value: item\n      };\n    });\n  }\n};\n\nconst compareDate = element =>\n  isToday(new Date(element.value.date))\n    ? { date: 0, element: element }\n    : isTomorrow(new Date(element.value.date))\n    ? { date: 1, element: element }\n    : isFuture(new Date(element.value.date))\n    ? { date: 2, element: element }\n    : isPast(new Date(element.value.date))\n    ? { date: 0, element: element }\n    : null;\n\nconst formatingDates = list => {\n  let upcoming = [];\n  let tomorrow = [];\n  let today = [];\n  if (list.length) {\n    list.forEach(element => {\n      let date = compareDate(element);\n      return date.date === 0\n        ? today.push(date.element)\n        : date.date === 1\n        ? tomorrow.push(date.element)\n        : date.date === 2\n        ? upcoming.push(date.element)\n        : null;\n    });\n  }\n  return {\n    today: today,\n    upcoming: upcoming,\n    tomorrow: tomorrow\n  };\n};\n\nconst sortByImportance = list => {\n  let high = [];\n  let medium = [];\n  let low = [];\n  if (list.length) {\n    list.forEach(element =>\n      element.value.importance === \"high\"\n        ? high.push(element)\n        : element.value.importance === \"medium\"\n        ? medium.push(element)\n        : element.value.importance === \"low\"\n        ? low.push(element)\n        : null\n    );\n  }\n  return {\n    high: high,\n    medium: medium,\n    low: low\n  };\n};\n\nconst remindersReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.GET_REMINDERS_LIST_SUCCESS:\n      if (action.payload === null) {\n        return {\n          ...state,\n          splashScreen: false\n        };\n      } else {\n        let data = formatingObject(action.payload);\n        let dates = formatingDates(data);\n        let importance = sortByImportance(data);\n        return {\n          ...state,\n          reminders: data,\n          today: dates.today,\n          upcoming: dates.upcoming,\n          tomorrow: dates.tomorrow,\n          splashScreen: false,\n          highImportance: importance.high,\n          mediumImportance: importance.medium,\n          lowImportance: importance.low,\n          isFiltered: false\n        };\n      }\n    case actionTypes.USER_LOGGED_IN:\n      return {\n        ...state,\n        splashScreen: true\n      };\n    case actionTypes.USER_LOGGED_OUT:\n      return {\n        ...state,\n        reminders: [],\n        splashScreen: false,\n        today: [],\n        tomorrow: [],\n        upcoming: [],\n        highImportance: [],\n        mediumImportance: [],\n        lowImportance: [],\n        criterium: null,\n        isFiltered: false\n      };\n    case actionTypes.RENDER_FILTER_ROUTE:\n      return {\n        ...state,\n        isFilterRouteHidden: false\n      };\n    case actionTypes.DELETE_FILTER_ROUTE:\n      return {\n        ...state,\n        isFilterRouteHidden: true\n      };\n    default:\n      return state;\n  }\n};\n\nexport default remindersReducer;\n"]},"metadata":{},"sourceType":"module"}